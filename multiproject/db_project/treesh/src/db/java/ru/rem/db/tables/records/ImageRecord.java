/*
 * This file is generated by jOOQ.
*/
package ru.rem.db.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.rem.db.tables.Image;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageRecord extends UpdatableRecordImpl<ImageRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = 1374386078;

    /**
     * Setter for <code>public.image.image_id</code>.
     */
    public ImageRecord setImageId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.image.image_id</code>.
     */
    public Integer getImageId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.image.directory</code>.
     */
    public ImageRecord setDirectory(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.image.directory</code>.
     */
    public String getDirectory() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.image.file_name</code>.
     */
    public ImageRecord setFileName(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.image.file_name</code>.
     */
    public String getFileName() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return Image.IMAGE.IMAGE_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Image.IMAGE.DIRECTORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Image.IMAGE.FILE_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getImageId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getDirectory();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getFileName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getImageId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getDirectory();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getFileName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord value1(Integer value) {
        setImageId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord value2(String value) {
        setDirectory(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord value3(String value) {
        setFileName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ImageRecord
     */
    public ImageRecord() {
        super(Image.IMAGE);
    }

    /**
     * Create a detached, initialised ImageRecord
     */
    public ImageRecord(Integer imageId, String directory, String fileName) {
        super(Image.IMAGE);

        set(0, imageId);
        set(1, directory);
        set(2, fileName);
    }
}
