/*
 * This file is generated by jOOQ.
*/
package ru.rem.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.rem.db.Indexes;
import ru.rem.db.Keys;
import ru.rem.db.Public;
import ru.rem.db.tables.records.ThreadRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Thread extends TableImpl<ThreadRecord> {

    private static final long serialVersionUID = 1767490163;

    /**
     * The reference instance of <code>public.thread</code>
     */
    public static final Thread THREAD = new Thread();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ThreadRecord> getRecordType() {
        return ThreadRecord.class;
    }

    /**
     * The column <code>public.thread.thread_id</code>.
     */
    public final TableField<ThreadRecord, Integer> THREAD_ID = createField("thread_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('thread_thread_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.thread.message</code>.
     */
    public final TableField<ThreadRecord, String> MESSAGE = createField("message", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.thread.priority</code>.
     */
    public final TableField<ThreadRecord, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('thread_priority_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.thread.date_time</code>.
     */
    public final TableField<ThreadRecord, Timestamp> DATE_TIME = createField("date_time", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>public.thread.channel_id</code>.
     */
    public final TableField<ThreadRecord, Integer> CHANNEL_ID = createField("channel_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.thread.image_id</code>.
     */
    public final TableField<ThreadRecord, Integer> IMAGE_ID = createField("image_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>public.thread</code> table reference
     */
    public Thread() {
        this(DSL.name("thread"), null);
    }

    /**
     * Create an aliased <code>public.thread</code> table reference
     */
    public Thread(String alias) {
        this(DSL.name(alias), THREAD);
    }

    /**
     * Create an aliased <code>public.thread</code> table reference
     */
    public Thread(Name alias) {
        this(alias, THREAD);
    }

    private Thread(Name alias, Table<ThreadRecord> aliased) {
        this(alias, aliased, null);
    }

    private Thread(Name alias, Table<ThreadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.THREAD_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ThreadRecord, Integer> getIdentity() {
        return Keys.IDENTITY_THREAD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ThreadRecord> getPrimaryKey() {
        return Keys.THREAD_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ThreadRecord>> getKeys() {
        return Arrays.<UniqueKey<ThreadRecord>>asList(Keys.THREAD_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ThreadRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ThreadRecord, ?>>asList(Keys.THREAD__THREAD_CHANNEL_ID_FK, Keys.THREAD__THREAD_IMAGE_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Thread as(String alias) {
        return new Thread(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Thread as(Name alias) {
        return new Thread(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Thread rename(String name) {
        return new Thread(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Thread rename(Name name) {
        return new Thread(name, null);
    }
}
